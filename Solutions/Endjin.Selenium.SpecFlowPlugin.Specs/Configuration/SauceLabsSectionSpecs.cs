#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------



#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace Endjin.Selenium.SpecFlowPlugin.Specs.Configuration
{
    #region Using Directives

    using System.Configuration;
    using Endjin.Selenium.SpecFlowPlugin.Configuration;
    using Machine.Specifications;

    #endregion

    [Subject(typeof(SauceLabsSection))]
    public class when_the_configuration_manager_is_asked_to_retrieve_a_sauce_labs_section
    {
        static SauceLabsSection sut;

        Because of = () => { sut = ConfigurationManager.GetSection("sauceLabsSection") as SauceLabsSection; };

        It should_return_an_credentails_element_with_the_correct_access_key = () => sut.Credentials.AccessKey.ShouldBeEqualIgnoringCase("access_key");
        It should_return_an_credentails_element_with_the_correct_url = () => sut.Credentials.Url.ShouldBeEqualIgnoringCase("url");
        It should_return_an_credentails_element_with_the_correct_username = () => sut.Credentials.UserName.ShouldBeEqualIgnoringCase("user_name");

        It should_return_an_capability_element_with_the_correct_key = () => sut.Capabilities.GetItemAt(0).Key.ShouldBeEqualIgnoringCase("test_key");
        It should_return_an_capability_element_with_the_correct_browser = () => sut.Capabilities.GetItemAt(0).Browser.ShouldBeEqualIgnoringCase("chrome");
        It should_return_an_capability_element_with_the_correct_browser_version = () => sut.Capabilities.GetItemAt(0).BrowserVersion.ShouldBeEqualIgnoringCase("10");
        It should_return_an_capability_element_with_the_correct_platform = () => sut.Capabilities.GetItemAt(0).Platform.ShouldBeEqualIgnoringCase("windows 8");
    }
}